'use client';

import React, { useState, useEffect, useRef } from 'react';
import { surahs, reciters } from '@/lib/quranData';

// Background sounds
const backgroundSounds = [
  { id: 'none', name: 'صمت (بدون صوت)', icon: '🔇' },
  { id: 'rain', name: 'صوت المطر الهادئ', icon: '🌧️' },
  { id: 'ocean', name: 'أمواج البحر', icon: '🌊' },
  { id: 'forest', name: 'أصوات الغابة', icon: '🌲' },
  { id: 'fire', name: 'نار الموقد', icon: '🔥' },
  { id: 'cafe', name: 'مقهى مزدحم', icon: '☕' },
  { id: 'night', name: 'أصوات الليل', icon: '🌙' },
  { id: 'birds', name: 'زقزقة العصافير', icon: '🐦' },
];

interface Task {
  id: number;
  text: string;
  completed: boolean;
  estimatedPomodoros: number;
  completedPomodoros: number;
}

export default function PomodoroPage() {
  // Dark mode detection
  const [isDarkMode, setIsDarkMode] = useState(false);
  
  useEffect(() => {
    // Check initial dark mode
    setIsDarkMode(document.documentElement.classList.contains('dark'));
    
    // Watch for changes
    const observer = new MutationObserver(() => {
      setIsDarkMode(document.documentElement.classList.contains('dark'));
    });
    
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
    
    return () => observer.disconnect();
  }, []);
  
  // Tab state
  const [activeTab, setActiveTab] = useState<'timer' | 'tasks' | 'stats' | 'settings'>('timer');
  
  // Timer state
  const [minutes, setMinutes] = useState(25);
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [sessionType, setSessionType] = useState<'work' | 'break'>('work');
  const [sessionNumber, setSessionNumber] = useState(1);
  
  // Settings
  const [workDuration, setWorkDuration] = useState(25);
  const [shortBreakDuration, setShortBreakDuration] = useState(5);
  const [longBreakDuration, setLongBreakDuration] = useState(15);
  
  // Tasks
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTaskText, setNewTaskText] = useState('');
  const [currentTaskId, setCurrentTaskId] = useState<number | null>(null);
  
  // Statistics
  const [completedPomodoros, setCompletedPomodoros] = useState(0);
  const [totalFocusTime, setTotalFocusTime] = useState(0);
  
  // Background sound
  const [selectedSound, setSelectedSound] = useState('none');
  
  // Quran state
  const [selectedSurah, setSelectedSurah] = useState('');
  const [selectedReciter, setSelectedReciter] = useState('ar.alafasy');
  const [currentPage, setCurrentPage] = useState(1);
  const [isPlayingQuran, setIsPlayingQuran] = useState(false);
  const [isImageLoading, setIsImageLoading] = useState(false);
  const [surahText, setSurahText] = useState<string[]>([]);
  const [loadingText, setLoadingText] = useState(false);
  const [pageAyahs, setPageAyahs] = useState<Array<{text: string, surahName: string, numberInSurah: number, surahNumber: number}>>([]);
  const [surahData, setSurahData] = useState<{name: string, revelation: string, ayahs: Array<{text: string, number: number}>} | null>(null);
  const [pageData, setPageData] = useState<Array<{text: string, surahName: string, numberInSurah: number, surahNumber: number}>>([]);
  const [loadingPage, setLoadingPage] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [currentImageSource, setCurrentImageSource] = useState(0);
  
  // Audio refs
  const quranAudioRef = useRef<HTMLAudioElement | null>(null);
  const backgroundAudioRef = useRef<HTMLAudioElement | null>(null);
  
  
  // Load Page from API (604 pages)
  const loadPageData = async (pageNumber: number) => {
    setLoadingPage(true);
    setPageData([]);
    try {
      console.log('🔄 جاري تحميل صفحة:', pageNumber);
      const response = await fetch(`https://api.alquran.cloud/v1/page/${pageNumber}/ar.alafasy`);
      const data = await response.json();
      
      if (data.data && data.data.ayahs) {
        const ayahs = data.data.ayahs.map((ayah: any) => ({
          text: ayah.text,
          surahName: ayah.surah.name,
          numberInSurah: ayah.numberInSurah,
          surahNumber: ayah.surah.number
        }));
        setPageData(ayahs);
        console.log('✅ تم تحميل الصفحة بنجاح، عدد الآيات:', ayahs.length);
      }
    } catch (error) {
      console.error('❌ خطأ في تحميل الصفحة:', error);
    } finally {
      setLoadingPage(false);
    }
  };
  
  // Load Surah from API
  const loadSurahData = async (surahNumber: string) => {
    setLoadingText(true);
    setSurahData(null);
    try {
      console.log('🔄 جاري تحميل السورة:', surahNumber);
      const response = await fetch(`https://api.alquran.cloud/v1/surah/${surahNumber}/ar.alafasy`);
      const data = await response.json();
      
      if (data.data) {
        const surahInfo = {
          name: data.data.name,
          revelation: data.data.revelationType === 'Meccan' ? 'مكية' : 'مدنية',
          ayahs: data.data.ayahs.map((ayah: any) => ({
            text: ayah.text,
            number: ayah.numberInSurah
          }))
        };
        setSurahData(surahInfo);
        console.log('✅ تم تحميل السورة بنجاح');
      }
    } catch (error) {
      console.error('❌ خطأ في تحميل السورة:', error);
    } finally {
      setLoadingText(false);
    }
  };
  
  // Handle surah change
  const handleSurahChange = (surahNumber: string) => {
    setSelectedSurah(surahNumber);
    setIsPlayingQuran(false);
    
    const surah = surahs.find(s => s.number === parseInt(surahNumber));
    if (surah) {
      setCurrentPage(surah.page);
    }
    
    // Load surah data
    if (surahNumber) {
      loadSurahData(surahNumber);
    }
  };
  
  // Navigate to next/previous page
  const handleNextPage = () => {
    if (currentPage < 604) {
      setCurrentPage(prev => prev + 1);
    }
  };
  
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(prev => prev - 1);
    }
  };
  
  // Load page data when page changes
  useEffect(() => {
    if (selectedSurah) {
      loadPageData(currentPage);
    }
  }, [currentPage, selectedSurah]);
  
  // Play Quran audio when button is clicked
  useEffect(() => {
    if (!selectedSurah) return;
    
    // Create audio element if doesn't exist
    if (!quranAudioRef.current) {
      quranAudioRef.current = new Audio();
      quranAudioRef.current.preload = 'metadata';
      
      // Add event listeners
      quranAudioRef.current.addEventListener('ended', () => {
        console.log('✅ انتهت التلاوة');
        setIsPlayingQuran(false);
      });
      
      quranAudioRef.current.addEventListener('loadstart', () => {
        console.log('🔄 بدء تحميل الصوت...');
      });
      
      quranAudioRef.current.addEventListener('canplay', () => {
        console.log('✅ الصوت جاهز للتشغيل');
      });
      
      quranAudioRef.current.addEventListener('error', (e) => {
        console.error('❌ خطأ في تحميل الصوت:', e);
      });
    }
    
    // Mishary Al-Afasy reciter code
    const reciterCode = 'Alafasy_128kbps';
    const surahNumber = String(selectedSurah).padStart(3, '0');
    
    // Try multiple audio sources
    const audioSources = [
      `https://server8.mp3quran.net/${reciterCode}/${surahNumber}.mp3`,
      `https://download.quranicaudio.com/quran/mishaari_raashid_al_3afaasee/${surahNumber}.mp3`,
      `https://cdn.islamic.network/quran/audio-surah/128/ar.alafasy/${surahNumber}.mp3`
    ];
    
    const currentAudioUrl = audioSources[0];
    console.log('🎵 رابط الصوت:', currentAudioUrl);
    console.log('🎵 السورة رقم:', selectedSurah);
    
    quranAudioRef.current.src = currentAudioUrl;
    
    if (isPlayingQuran) {
      console.log('▶️ محاولة تشغيل الصوت...');
      const playPromise = quranAudioRef.current.play();
      
      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            console.log('✅ بدأ تشغيل الصوت بنجاح');
          })
          .catch((err) => {
            console.error('❌ خطأ في تشغيل الصوت:', err);
            
            // Try second source
            console.log('🔄 محاولة المصدر الثاني...');
            if (quranAudioRef.current) {
              quranAudioRef.current.src = audioSources[1];
              quranAudioRef.current.play().catch(() => {
                // Try third source
                console.log('🔄 محاولة المصدر الثالث...');
                if (quranAudioRef.current) {
                  quranAudioRef.current.src = audioSources[2];
                  quranAudioRef.current.play().catch(() => {
                    alert('عذراً، لم نتمكن من تشغيل الصوت. الرجاء التأكد من الاتصال بالإنترنت والمحاولة مرة أخرى.');
                    setIsPlayingQuran(false);
                  });
                }
              });
            }
          });
      }
    } else {
      quranAudioRef.current.pause();
      console.log('⏸️ تم إيقاف الصوت');
    }
    
    return () => {
      if (quranAudioRef.current && !isPlayingQuran) {
        quranAudioRef.current.pause();
      }
    };
  }, [isPlayingQuran, selectedSurah]);
  
  // Play background sounds
  useEffect(() => {
    if (!backgroundAudioRef.current) {
      backgroundAudioRef.current = new Audio();
      backgroundAudioRef.current.loop = true;
    }
    
    const soundUrls: { [key: string]: string } = {
      'rain': 'https://cdn.pixabay.com/download/audio/2022/05/13/audio_257112ce99.mp3',
      'ocean': 'https://cdn.pixabay.com/download/audio/2022/06/07/audio_b9bd4170f4.mp3',
      'forest': 'https://cdn.pixabay.com/download/audio/2022/03/10/audio_2b2cc7e2d5.mp3',
      'fire': 'https://cdn.pixabay.com/download/audio/2022/03/15/audio_c8ebd6d4e0.mp3',
      'cafe': 'https://cdn.pixabay.com/download/audio/2021/08/04/audio_bb630cc098.mp3',
      'night': 'https://cdn.pixabay.com/download/audio/2022/03/24/audio_1808fbf07a.mp3',
      'birds': 'https://cdn.pixabay.com/download/audio/2022/03/09/audio_c610d74c1b.mp3',
    };
    
    if (selectedSound !== 'none' && soundUrls[selectedSound]) {
      backgroundAudioRef.current.src = soundUrls[selectedSound];
      backgroundAudioRef.current.play().catch((err) => {
        console.error('خطأ في تشغيل صوت الخلفية:', err);
      });
    } else {
      backgroundAudioRef.current.pause();
    }
    
    return () => {
      if (backgroundAudioRef.current) {
        backgroundAudioRef.current.pause();
      }
    };
  }, [selectedSound]);
  
  // Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;

    if (isRunning) {
      interval = setInterval(() => {
        if (seconds === 0) {
          if (minutes === 0) {
            handleTimerComplete();
          } else {
            setMinutes(minutes - 1);
            setSeconds(59);
          }
        } else {
          setSeconds(seconds - 1);
        }
      }, 1000);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRunning, minutes, seconds]);

  const handleTimerComplete = () => {
    setIsRunning(false);
    
    if (sessionType === 'work') {
      setCompletedPomodoros(prev => prev + 1);
      setTotalFocusTime(prev => prev + workDuration);
      
      if (currentTaskId) {
        setTasks(tasks.map(task => 
          task.id === currentTaskId 
            ? { ...task, completedPomodoros: task.completedPomodoros + 1 }
            : task
        ));
      }
      
      const isLongBreak = sessionNumber % 4 === 0;
      const breakTime = isLongBreak ? longBreakDuration : shortBreakDuration;
      
      setSessionType('break');
      setMinutes(breakTime);
      setSeconds(0);
    } else {
      setSessionType('work');
      setSessionNumber(prev => prev + 1);
      setMinutes(workDuration);
      setSeconds(0);
    }
  };

  const handleStartPause = () => {
    setIsRunning(!isRunning);
  };

  const handleReset = () => {
    setIsRunning(false);
    const duration = sessionType === 'work' ? workDuration : shortBreakDuration;
    setMinutes(duration);
    setSeconds(0);
  };

  const handleAddTask = () => {
    if (newTaskText.trim()) {
      const newTask: Task = {
        id: Date.now(),
        text: newTaskText.trim(),
        completed: false,
        estimatedPomodoros: 1,
        completedPomodoros: 0,
      };
      setTasks([...tasks, newTask]);
      setNewTaskText('');
      
      if (!currentTaskId) {
        setCurrentTaskId(newTask.id);
      }
    }
  };

  const handleToggleTask = (id: number) => {
    setTasks(tasks.map(task =>
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const handleDeleteTask = (id: number) => {
    setTasks(tasks.filter(task => task.id !== id));
    if (currentTaskId === id) {
      setCurrentTaskId(null);
    }
  };

  const progress = ((workDuration * 60 - (minutes * 60 + seconds)) / (workDuration * 60)) * 100;

  // Force English numbers in inputs
  useEffect(() => {
    const convertArabicToEnglish = (value: string) => {
      const arabicNumbers = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];
      const englishNumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
      
      let result = value;
      arabicNumbers.forEach((arabic, index) => {
        result = result.replace(new RegExp(arabic, 'g'), englishNumbers[index]);
      });
      return result;
    };
    
    const forceEnglishNumbers = () => {
      const inputs = document.querySelectorAll('.pomodoro-page input[type="number"], .english-numbers');
      inputs.forEach((input: any) => {
        if (input && input.value) {
          const converted = convertArabicToEnglish(input.value);
          if (converted !== input.value) {
            input.value = converted;
            input.setAttribute('value', converted);
          }
        }
      });
      
      // Also convert text content in english-numbers divs
      const divs = document.querySelectorAll('.pomodoro-page .english-numbers');
      divs.forEach((div: any) => {
        if (div && div.textContent) {
          const converted = convertArabicToEnglish(div.textContent);
          if (converted !== div.textContent) {
            div.textContent = converted;
          }
        }
      });
    };
    
    // Force on mount multiple times to ensure it works
    const timeouts = [0, 50, 100, 200, 500, 1000];
    timeouts.forEach(delay => setTimeout(forceEnglishNumbers, delay));
    
    // Create MutationObserver to watch for DOM changes
    const observer = new MutationObserver(() => {
      forceEnglishNumbers();
    });
    
    const container = document.querySelector('.pomodoro-page');
    if (container) {
      observer.observe(container, {
        childList: true,
        subtree: true,
        characterData: true,
        attributes: true,
        attributeFilter: ['value']
      });
    }
    
    const inputs = document.querySelectorAll('.pomodoro-page input[type="number"]');
    const handlers: Array<{ input: any; handler: any }> = [];
    
    // Add event listeners for future changes
    inputs.forEach((input: any) => {
      if (input) {
        const handleInput = (e: any) => {
          const converted = convertArabicToEnglish(e.target.value);
          if (converted !== e.target.value) {
            e.target.value = converted;
          }
        };
        
        const handleFocus = () => {
          forceEnglishNumbers();
        };
        
        input.addEventListener('input', handleInput);
        input.addEventListener('focus', handleFocus);
        handlers.push({ input, handler: handleInput });
      }
    });
    
    return () => {
      observer.disconnect();
      handlers.forEach(({ input, handler }) => {
        input.removeEventListener('input', handler);
      });
    };
  }, [workDuration, shortBreakDuration, longBreakDuration, activeTab]);

  return (
    <div className="pomodoro-page min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 py-4 sm:py-6 px-4">
      <style dangerouslySetInnerHTML={{__html: `
        @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap');
        
        .pomodoro-page * {
          font-feature-settings: "tnum" 1;
        }
        
        .pomodoro-page input[type="number"],
        .pomodoro-page .english-numbers {
          font-family: 'Roboto Mono', 'Courier New', Courier, monospace !important;
          unicode-bidi: plaintext !important;
          -webkit-font-feature-settings: "tnum" !important;
          font-feature-settings: "tnum" !important;
        }
        
        .pomodoro-page input[type="number"]::-webkit-inner-spin-button,
        .pomodoro-page input[type="number"]::-webkit-outer-spin-button {
          opacity: 1;
        }
      `}} />
        <div className="container mx-auto max-w-7xl">
        {/* Integrated Header */}
        <div className="text-center mb-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg rounded-2xl shadow-xl border border-emerald-200/50 dark:border-emerald-700/30 p-6 sm:p-8">
          <div className="flex items-center justify-center gap-3 mb-3">
            <div className="bg-gradient-to-br from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 p-3 rounded-2xl shadow-lg">
              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
            </div>
            <h1 className="text-3xl sm:text-4xl lg:text-5xl font-black bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 dark:from-emerald-400 dark:via-teal-400 dark:to-cyan-400 bg-clip-text text-transparent">
              🍅 مؤقت الدراسة
            </h1>
          </div>
          <p className="text-base sm:text-lg text-emerald-700 dark:text-emerald-300 font-semibold">
            نظّم وقتك وركّز على دراستك واستغل وقت الراحة في قراءة القرآن
          </p>
        </div>

        {/* Tabs */}
        <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-xl border border-emerald-100 dark:border-gray-700 p-6 mb-6">
          <div className="flex flex-wrap justify-center gap-2 mb-6">
            <button
              onClick={() => setActiveTab('timer')}
              className={`inline-flex items-center px-5 py-2.5 rounded-xl text-sm font-bold transition-all duration-300 transform hover:scale-105 ${
                activeTab === 'timer'
                  ? 'bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 text-white shadow-lg shadow-emerald-500/50 dark:shadow-emerald-700/50'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth="2.5">
                <circle cx="12" cy="12" r="10"/>
                <polyline points="12 6 12 12 16 14"/>
              </svg>
              المؤقت
            </button>
            
            <button
              onClick={() => setActiveTab('tasks')}
              className={`inline-flex items-center px-5 py-2.5 rounded-xl text-sm font-bold transition-all duration-300 transform hover:scale-105 ${
                activeTab === 'tasks'
                  ? 'bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 text-white shadow-lg shadow-emerald-500/50 dark:shadow-emerald-700/50'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth="2.5">
                <circle cx="12" cy="12" r="10"/>
                <circle cx="12" cy="12" r="6"/>
                <circle cx="12" cy="12" r="2"/>
              </svg>
              المهام
            </button>
            
            <button
              onClick={() => setActiveTab('stats')}
              className={`inline-flex items-center px-5 py-2.5 rounded-xl text-sm font-bold transition-all duration-300 transform hover:scale-105 ${
                activeTab === 'stats'
                  ? 'bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 text-white shadow-lg shadow-emerald-500/50 dark:shadow-emerald-700/50'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth="2.5">
                <path d="M3 3v16a2 2 0 0 0 2 2h16"/>
                <path d="M18 17V9"/>
                <path d="M13 17V5"/>
                <path d="M8 17v-3"/>
              </svg>
              الإحصائيات
            </button>
            
            <button
              onClick={() => setActiveTab('settings')}
              className={`inline-flex items-center px-5 py-2.5 rounded-xl text-sm font-bold transition-all duration-300 transform hover:scale-105 ${
                activeTab === 'settings'
                  ? 'bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 text-white shadow-lg shadow-emerald-500/50 dark:shadow-emerald-700/50'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth="2.5">
                <circle cx="12" cy="12" r="3"/>
                <path d="M12 1v6m0 6v6"/>
              </svg>
              الإعدادات
            </button>
          </div>

          {/* Timer Tab */}
          {activeTab === 'timer' && (
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
              {/* Timer Card */}
              <div className="xl:col-span-2 space-y-6">
                <div className="bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50 dark:from-emerald-900/30 dark:via-teal-900/30 dark:to-cyan-900/30 rounded-2xl p-8 shadow-2xl border-2 border-emerald-200 dark:border-emerald-700/50">
                  <div className="text-center mb-6">
                    <div className="flex items-center justify-center gap-2 mb-2">
                      <div className="bg-gradient-to-br from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 p-2 rounded-lg shadow-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"></path>
                          <path d="M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z"></path>
                        </svg>
                      </div>
                      <h3 className="text-2xl font-black bg-gradient-to-r from-emerald-700 to-teal-700 dark:from-emerald-300 dark:to-teal-300 bg-clip-text text-transparent">
                        {sessionType === 'work' ? 'وقت الدراسة 📚' : 'وقت الراحة ☕'}
                      </h3>
                    </div>
                    <div className="text-sm font-bold text-emerald-600 dark:text-emerald-400 bg-emerald-100 dark:bg-emerald-900/30 px-4 py-1 rounded-full inline-block">
                      الجلسة {sessionNumber}
                    </div>
                  </div>
                  
                  <div className="text-center space-y-6">
                    <div dir="ltr" lang="en" className="english-numbers text-7xl sm:text-8xl font-black bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 dark:from-emerald-400 dark:via-teal-400 dark:to-cyan-400 bg-clip-text text-transparent font-mono drop-shadow-lg" style={{ fontVariantNumeric: 'lining-nums' }}>
                      {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}
                    </div>
                    
                    <div className="space-y-2 px-4">
                      <div className="w-full bg-emerald-100 dark:bg-emerald-900/30 rounded-full h-3 shadow-inner">
                        <div
                          className="bg-gradient-to-r from-emerald-500 via-teal-500 to-cyan-500 dark:from-emerald-600 dark:via-teal-600 dark:to-cyan-600 h-full rounded-full transition-all duration-500 shadow-lg"
                          style={{ width: `${progress}%` }}
                        />
                      </div>
                      <p className="text-sm font-bold text-emerald-700 dark:text-emerald-300">
                        {Math.round(progress)}% مكتمل 🎯
                      </p>
                    </div>
                    
                    <div className="flex flex-col sm:flex-row gap-3 justify-center pt-4">
                      <button
                        onClick={handleStartPause}
                        className="px-10 py-4 bg-gradient-to-r from-emerald-500 via-teal-500 to-cyan-500 dark:from-emerald-600 dark:via-teal-600 dark:to-cyan-600 hover:from-emerald-600 hover:via-teal-600 hover:to-cyan-600 dark:hover:from-emerald-700 dark:hover:via-teal-700 dark:hover:to-cyan-700 text-white font-black text-lg rounded-xl shadow-xl shadow-emerald-500/50 dark:shadow-emerald-700/50 transition-all duration-300 transform hover:scale-105"
                      >
                        {isRunning ? '⏸️ إيقاف مؤقت' : '▶️ بدء'}
                      </button>
                      
                      <button
                        onClick={handleReset}
                        style={{
                          padding: '1rem 2rem',
                          border: '2px solid rgb(16, 185, 129)',
                          backgroundColor: 'rgb(51, 65, 85)',
                          color: 'rgb(52, 211, 153)',
                          fontWeight: '900',
                          fontSize: '1.125rem',
                          borderRadius: '0.75rem',
                          cursor: 'pointer',
                          boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                        }}
                      >
                        🔄 إعادة
                      </button>
                    </div>
                  </div>
                </div>

                {/* Quick Add Task */}
                <div 
                  style={{
                    background: 'linear-gradient(135deg, rgb(30, 41, 59), rgb(15, 23, 42))',
                    borderRadius: '1rem',
                    padding: '1.5rem',
                    boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                    border: '2px solid rgb(51, 65, 85)'
                  }}
                >
                  <h3 style={{ color: 'rgb(52, 211, 153)', fontWeight: '900', fontSize: '1.25rem', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="12" cy="12" r="10"/>
                      <circle cx="12" cy="12" r="6"/>
                      <circle cx="12" cy="12" r="2"/>
                    </svg>
                    ابدأ مهمة جديدة
                  </h3>
                  
                  <div style={{ display: 'flex', flexDirection: 'row', gap: '0.75rem', flexWrap: 'wrap' }}>
                    <input
                      type="text"
                      value={newTaskText}
                      onChange={(e) => setNewTaskText(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleAddTask()}
                      placeholder="اكتب اسم المهمة الجديدة..."
                      style={{
                        flex: '1',
                        minWidth: '200px',
                        height: '3.5rem',
                        borderRadius: '0.75rem',
                        border: '2px solid #475569',
                        backgroundColor: '#334155',
                        color: '#ffffff',
                        padding: '0 1.25rem',
                        fontWeight: '600',
                        fontSize: '1.125rem',
                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
                        outline: 'none'
                      }}
                    />
                    <button
                      onClick={handleAddTask}
                      disabled={!newTaskText.trim()}
                      className="px-8 py-3 bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 hover:from-emerald-600 hover:to-teal-700 dark:hover:from-emerald-700 dark:hover:to-teal-800 text-white font-black text-lg rounded-xl disabled:opacity-40 disabled:cursor-not-allowed disabled:bg-gray-400 dark:disabled:bg-gray-700 disabled:from-gray-400 disabled:to-gray-500 dark:disabled:from-gray-700 dark:disabled:to-gray-800 shadow-xl shadow-emerald-500/40 dark:shadow-emerald-700/50 transition-all duration-300 transform hover:scale-105 disabled:transform-none disabled:shadow-none"
                    >
                      ➕ إضافة
                    </button>
                  </div>
                </div>

                {/* Quran Reader */}
                <div className="bg-gradient-to-br from-slate-800 via-slate-900 to-gray-900 dark:from-slate-900 dark:via-gray-900 dark:to-black rounded-2xl p-6 sm:p-8 shadow-2xl border border-slate-700 dark:border-slate-800">
                  <div className="text-center mb-6 text-slate-100">
                    <div className="flex items-center justify-center gap-2 mb-3">
                      <div className="bg-gradient-to-br from-emerald-500 to-teal-600 p-2 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
                          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
                        </svg>
                      </div>
                      <h2 className="text-2xl font-black bg-gradient-to-r from-emerald-300 to-teal-300 bg-clip-text text-transparent">
                        استغل وقت الراحة في قراءة وردك اليومي 📖
                      </h2>
                      <div className="mt-2 inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-full text-sm font-bold shadow-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
                          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
                        </svg>
                        نظام صفحات القرآن الكامل (604 صفحة) ✅
                      </div>
                    </div>
                    <p className="text-sm text-slate-300 leading-relaxed font-amiri" style={{fontFamily: "'Amiri', serif"}}>
                      عن عبد الله بن عمرو رضي الله عنهما قال: قال رسول الله ﷺ:<br />
                      <span className="text-emerald-300 font-bold">«اقْرَؤوا القُرْآنَ؛ فإنَّه يَأتي يَومَ القيامةِ شَفيعًا لأصحابِه»</span><br/>
                      <span className="text-slate-400 text-xs">(رواه مسلم)</span>
                    </p>
                  </div>
                  
                  <div className="flex flex-col sm:flex-row gap-3 mb-4">
                    <select
                      value={selectedSurah}
                      onChange={(e) => handleSurahChange(e.target.value)}
                      className="flex-1 bg-slate-700 dark:bg-slate-800 border-2 border-slate-600 dark:border-slate-700 text-slate-100 dark:text-slate-200 rounded-xl px-4 py-3 text-center font-bold hover:bg-slate-600 dark:hover:bg-slate-700 focus:ring-2 focus:ring-emerald-500 transition-all"
                      style={{ fontFamily: "'Amiri', serif", colorScheme: 'dark' }}
                    >
                      <option value="" className="bg-slate-700 dark:bg-slate-900">الانتقال إلى سورة...</option>
                      {surahs.map((surah) => (
                        <option key={surah.number} value={surah.number} className="bg-slate-700 dark:bg-slate-900">
                          {surah.number}. {surah.name}
                        </option>
                      ))}
                    </select>
                    
                    <select
                      value={selectedReciter}
                      onChange={(e) => setSelectedReciter(e.target.value)}
                      className="flex-1 bg-slate-700 dark:bg-slate-800 border-2 border-slate-600 dark:border-slate-700 text-slate-100 dark:text-slate-200 rounded-xl px-4 py-3 text-center font-bold hover:bg-slate-600 dark:hover:bg-slate-700 focus:ring-2 focus:ring-emerald-500 transition-all"
                      style={{ colorScheme: 'dark' }}
                    >
                      {reciters.map((reciter) => (
                        <option key={reciter.value} value={reciter.value} className="bg-slate-700 dark:bg-slate-900">
                          {reciter.name}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  {/* Quran Page Display */}
                  <div className="bg-gradient-to-br from-amber-50 to-orange-50 dark:from-slate-700 dark:via-slate-800 dark:to-slate-900 rounded-2xl p-4 mb-4 border-2 border-amber-200 dark:border-slate-600 shadow-inner">
                    <div className="relative">
                      {selectedSurah ? (
                        <div className="space-y-3">
                          
                          {/* Quran Display - Navy Blue & White Mushaf Style */}
                          <div className="relative flex flex-col items-center p-6" style={{ minHeight: '900px' }}>
                            <style dangerouslySetInnerHTML={{__html: `
                              @import url('https://fonts.googleapis.com/css2?family=Amiri+Quran&family=Scheherazade+New:wght@400;700&display=swap');
                              
                              /* صفحة المصحف - كحلي وأبيض */
                              .mushaf-page-navy {
                                background: 
                                  linear-gradient(135deg, 
                                    #ffffff 0%, 
                                    #f8f9fa 25%,
                                    #ffffff 50%,
                                    #f8f9fa 75%,
                                    #ffffff 100%
                                  ),
                                  repeating-linear-gradient(
                                    0deg,
                                    transparent,
                                    transparent 2px,
                                    rgba(13, 27, 62, 0.02) 2px,
                                    rgba(13, 27, 62, 0.02) 4px
                                  );
                                width: 100%;
                                max-width: 750px;
                                min-height: 950px;
                                border: 6px solid #0d1b3e;
                                border-radius: 4px;
                                box-shadow: 
                                  0 0 0 2px rgba(13, 27, 62, 0.3),
                                  0 0 0 4px #e8eaf0,
                                  0 25px 70px rgba(13, 27, 62, 0.4),
                                  inset 0 0 120px rgba(255, 255, 255, 0.6);
                                position: relative;
                                padding: 70px 55px;
                              }
                              
                              .dark .mushaf-page-navy {
                                background: 
                                  linear-gradient(135deg, 
                                    #0a0f1a 0%, 
                                    #050810 50%, 
                                    #0a0f1a 100%
                                  );
                                border: 6px solid #1e3a8a;
                                box-shadow: 
                                  0 0 0 2px rgba(30, 58, 138, 0.6),
                                  0 0 0 4px #0f172a,
                                  0 30px 80px rgba(0, 0, 0, 0.9),
                                  inset 0 0 100px rgba(30, 58, 138, 0.12);
                              }
                              
                              /* الإطار الداخلي الزخرفي */
                              .mushaf-inner-navy {
                                position: absolute;
                                top: 35px;
                                right: 35px;
                                bottom: 35px;
                                left: 35px;
                                border: 4px double #0d1b3e;
                                pointer-events: none;
                                border-radius: 2px;
                              }
                              
                              .dark .mushaf-inner-navy {
                                border: 4px double #1e3a8a;
                              }
                              
                              .mushaf-inner-navy::before {
                                content: '';
                                position: absolute;
                                top: 12px;
                                right: 12px;
                                bottom: 12px;
                                left: 12px;
                                border: 1px solid rgba(13, 27, 62, 0.3);
                              }
                              
                              .dark .mushaf-inner-navy::before {
                                border: 1px solid rgba(30, 58, 138, 0.5);
                              }
                              
                              /* زخرفة الأركان */
                              .mushaf-corner-navy {
                                position: absolute;
                                width: 45px;
                                height: 45px;
                                border: 3px solid #0d1b3e;
                              }
                              
                              .dark .mushaf-corner-navy {
                                border: 3px solid #1e3a8a;
                              }
                              
                              .mushaf-corner-navy.top-right {
                                top: 22px;
                                right: 22px;
                                border-bottom: none;
                                border-left: none;
                              }
                              
                              .mushaf-corner-navy.top-left {
                                top: 22px;
                                left: 22px;
                                border-bottom: none;
                                border-right: none;
                              }
                              
                              .mushaf-corner-navy.bottom-right {
                                bottom: 22px;
                                right: 22px;
                                border-top: none;
                                border-left: none;
                              }
                              
                              .mushaf-corner-navy.bottom-left {
                                bottom: 22px;
                                left: 22px;
                                border-top: none;
                                border-right: none;
                              }
                              
                              /* رأس السورة */
                              .mushaf-surah-navy {
                                text-align: center;
                                padding: 28px 0;
                                margin: 0 -25px 35px -25px;
                                background: 
                                  linear-gradient(90deg,
                                    transparent 0%,
                                    rgba(13, 27, 62, 0.08) 15%,
                                    rgba(13, 27, 62, 0.15) 50%,
                                    rgba(13, 27, 62, 0.08) 85%,
                                    transparent 100%
                                  );
                                border-top: 5px solid #0d1b3e;
                                border-bottom: 5px solid #0d1b3e;
                                position: relative;
                              }
                              
                              .dark .mushaf-surah-navy {
                                background: 
                                  linear-gradient(90deg,
                                    transparent 0%,
                                    rgba(30, 58, 138, 0.15) 15%,
                                    rgba(30, 58, 138, 0.25) 50%,
                                    rgba(30, 58, 138, 0.15) 85%,
                                    transparent 100%
                                  );
                                border-top: 5px solid #1e3a8a;
                                border-bottom: 5px solid #1e3a8a;
                              }
                              
                              .mushaf-surah-navy::before,
                              .mushaf-surah-navy::after {
                                content: '۞';
                                position: absolute;
                                font-size: 38px;
                                color: #1e40af;
                                top: 50%;
                                transform: translateY(-50%);
                                text-shadow: 0 2px 4px rgba(13, 27, 62, 0.2);
                              }
                              
                              .dark .mushaf-surah-navy::before,
                              .dark .mushaf-surah-navy::after {
                                color: #3b82f6;
                              }
                              
                              .mushaf-surah-navy::before {
                                right: 35px;
                              }
                              
                              .mushaf-surah-navy::after {
                                left: 35px;
                              }
                              
                              .mushaf-surah-name-navy {
                                font-family: 'Amiri Quran', 'Scheherazade New', serif;
                                font-size: 44px;
                                font-weight: 700;
                                color: #0d1b3e;
                                text-shadow: 0 1px 2px rgba(13, 27, 62, 0.15);
                                margin: 0;
                              }
                              
                              .dark .mushaf-surah-name-navy {
                                color: #60a5fa;
                                text-shadow: 0 2px 10px rgba(59, 130, 246, 0.5);
                              }
                              
                              /* البسملة */
                              .mushaf-bismillah-navy {
                                font-family: 'Amiri Quran', 'Scheherazade New', serif;
                                font-size: 40px;
                                text-align: center;
                                color: #1e293b;
                                margin: 40px 0;
                                padding: 22px;
                                line-height: 1.9;
                              }
                              
                              .dark .mushaf-bismillah-navy {
                                color: #cbd5e1;
                              }
                              
                              /* نص الآيات */
                              .mushaf-ayahs-navy {
                                font-family: 'Amiri Quran', 'Scheherazade New', 'Traditional Arabic', serif;
                                font-size: 30px;
                                line-height: 2.8;
                                text-align: justify;
                                text-justify: inter-word;
                                color: #0f172a;
                                direction: rtl;
                                word-spacing: 0.18em;
                                letter-spacing: 0.025em;
                                font-weight: 500;
                                text-rendering: optimizeLegibility;
                              }
                              
                              .dark .mushaf-ayahs-navy {
                                color: #e2e8f0;
                              }
                              
                              /* رقم الآية */
                              .mushaf-ayah-num-navy {
                                display: inline-flex;
                                align-items: center;
                                justify-content: center;
                                width: 36px;
                                height: 36px;
                                margin: 0 6px;
                                background: 
                                  radial-gradient(circle at 30% 30%, #ffffff, #dbeafe);
                                border: 3px solid #1e40af;
                                border-radius: 50%;
                                font-size: 15px;
                                font-weight: 700;
                                font-family: 'Roboto Mono', 'Courier New', monospace;
                                color: #0d1b3e;
                                box-shadow: 
                                  0 3px 6px rgba(13, 27, 62, 0.3),
                                  inset 0 1px 2px rgba(255, 255, 255, 0.8);
                                position: relative;
                                top: -2px;
                              }
                              
                              .dark .mushaf-ayah-num-navy {
                                background: radial-gradient(circle at 30% 30%, #3b82f6, #1e40af);
                                border: 3px solid #60a5fa;
                                color: #ffffff;
                              }
                              
                              /* رقم الصفحة في الأسفل */
                              .mushaf-page-num-navy {
                                position: absolute;
                                bottom: 28px;
                                left: 50%;
                                transform: translateX(-50%);
                                font-family: 'Roboto Mono', monospace;
                                font-size: 22px;
                                font-weight: 700;
                                color: #0d1b3e;
                                background: linear-gradient(135deg, #dbeafe, #bfdbfe, #dbeafe);
                                padding: 10px 32px;
                                border: 4px solid #1e40af;
                                border-radius: 24px;
                                box-shadow: 0 5px 15px rgba(13, 27, 62, 0.3);
                              }
                              
                              .dark .mushaf-page-num-navy {
                                color: #ffffff;
                                background: linear-gradient(135deg, #1e40af, #3b82f6, #1e40af);
                                border: 4px solid #60a5fa;
                              }
                              
                              /* ============================================ */
                              /* ألوان المصحف التقليدية الكلاسيكية */
                              /* ============================================ */
                              
                              /* Light Mode - خلفية بيضاء نظيفة */
                              .mushaf-page-classic {
                                background: #ffffff;
                                padding: 0;
                                border-radius: 16px;
                                min-height: 600px;
                                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
                                border: none;
                                position: relative;
                                overflow: hidden;
                              }
                              
                              .mushaf-text-classic {
                                color: #1e293b;
                              }
                              
                              /* Dark Mode - خلفية مثل الصورة بالضبط */
                              .dark .mushaf-page-classic {
                                background: linear-gradient(180deg, 
                                  #1e3a5f 0%, 
                                  #2c4f7c 20%, 
                                  #3d5a8c 40%,
                                  #2c4f7c 60%,
                                  #1e3a5f 100%
                                );
                                box-shadow: 
                                  0 10px 50px rgba(0, 0, 0, 0.8),
                                  inset 0 0 200px rgba(30, 58, 95, 0.5);
                                border: none;
                              }
                              
                              .dark .mushaf-text-classic {
                                color: #f8fafc;
                                text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
                                font-weight: 500;
                              }
                              
                              /* تأثير خفيف جداً للخلفية */
                              .mushaf-page-classic::before {
                                content: '';
                                position: absolute;
                                top: 0;
                                left: 0;
                                right: 0;
                                bottom: 0;
                                background: transparent;
                                pointer-events: none;
                                border-radius: 16px;
                              }
                              
                              .dark .mushaf-page-classic::before {
                                background: radial-gradient(
                                  ellipse at center,
                                  rgba(59, 130, 246, 0.05) 0%,
                                  transparent 70%
                                );
                              }
                              
                              /* رقم الآية - طبق الأصل من الصورة */
                              .mushaf-ayah-number-classic {
                                display: inline-flex;
                                align-items: center;
                                justify-content: center;
                                width: 32px;
                                height: 32px;
                                margin: 0 5px;
                                background: #2563eb;
                                border: 2px solid #3b82f6;
                                border-radius: 50%;
                                font-size: 13px;
                                font-weight: 700;
                                font-family: 'Roboto Mono', 'Courier New', monospace;
                                color: #ffffff;
                                box-shadow: 
                                  0 2px 6px rgba(37, 99, 235, 0.5),
                                  inset 0 1px 2px rgba(255, 255, 255, 0.2);
                                position: relative;
                                top: -2px;
                              }
                              
                              .dark .mushaf-ayah-number-classic {
                                background: rgba(96, 165, 250, 0.25);
                                border: 2.5px solid rgba(147, 197, 253, 0.8);
                                color: #e0f2fe;
                                box-shadow: 
                                  0 0 12px rgba(147, 197, 253, 0.4),
                                  inset 0 1px 3px rgba(255, 255, 255, 0.2);
                              }
                              
                              /* الإطار الداخلي - مثل الصورة */
                              .mushaf-inner-border {
                                position: absolute;
                                top: 40px;
                                left: 40px;
                                right: 40px;
                                bottom: 40px;
                                border: 1.5px solid rgba(147, 197, 253, 0.15);
                                border-radius: 20px;
                                pointer-events: none;
                                z-index: 0;
                                background: rgba(30, 58, 95, 0.1);
                              }
                              
                              .dark .mushaf-inner-border {
                                border-color: rgba(147, 197, 253, 0.25);
                                background: rgba(30, 58, 95, 0.4);
                                box-shadow: 
                                  0 0 40px rgba(30, 58, 95, 0.3),
                                  inset 0 0 60px rgba(59, 130, 246, 0.1);
                              }
                              
                              /* زخارف الأركان - أقل ظهوراً */
                              .mushaf-corner-ornament {
                                display: none;
                              }
                              
                              .dark .mushaf-corner-ornament {
                                display: none;
                              }
                              
                              /* شارة رقم الصفحة - بسيطة ونظيفة */
                              .mushaf-page-badge {
                                display: inline-block;
                                font-size: 17px;
                                font-weight: 600;
                                font-family: 'Roboto Mono', monospace;
                                color: #1e293b;
                                background: rgba(241, 245, 249, 0.9);
                                padding: 8px 24px;
                                border-radius: 25px;
                                border: none;
                                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                              }
                              
                              .dark .mushaf-page-badge {
                                color: #e0f2fe;
                                background: rgba(30, 58, 95, 0.6);
                                border: 1px solid rgba(147, 197, 253, 0.3);
                                box-shadow: 
                                  0 2px 12px rgba(0, 0, 0, 0.5),
                                  inset 0 1px 2px rgba(147, 197, 253, 0.2);
                              }
                            `}}/>
                            
                            {loadingPage ? (
                              <div className="mushaf-page-classic">
                                <div className="mushaf-inner-border"></div>
                                <div className="text-center flex items-center justify-center" style={{ position: 'relative', zIndex: 1, minHeight: '600px' }}>
                                  <div>
                                    <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-300 dark:border-blue-200 mx-auto mb-4"></div>
                                    <p className="text-xl mushaf-text-classic">جاري التحميل...</p>
                                  </div>
                                </div>
                              </div>
                            ) : pageData.length > 0 ? (
                              <div className="mushaf-page-classic">
                                {/* الإطار الداخلي المزخرف */}
                                <div className="mushaf-inner-border"></div>
                                
                                {/* المحتوى */}
                                <div style={{ position: 'relative', zIndex: 1, padding: '60px 80px' }}>
                                  {/* رقم الصفحة */}
                                  <div className="text-center mb-10 space-y-3">
                                    <span className="mushaf-page-badge" dir="ltr">
                                      صفحة {currentPage}
                                    </span>
                                    <div className="text-center">
                                      <span className="inline-flex items-center gap-2 px-5 py-2 bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 text-white rounded-full text-xs font-black shadow-lg">
                                        📖 نظام الصفحات: {currentPage} من 604
                                      </span>
                                    </div>
                                  </div>
                                  
                                  {/* النص القرآني - بألوان المصحف التقليدية */}
                                  <div className="text-right mushaf-text-classic" style={{ 
                                    fontSize: '28px', 
                                    lineHeight: '3.2', 
                                    fontFamily: "'Amiri Quran', 'Scheherazade New', serif",
                                    fontWeight: '500'
                                  }}>
                                    {pageData.map((ayah, index) => (
                                      <React.Fragment key={index}>
                                        {ayah.text}{' '}
                                        <span className="mushaf-ayah-number-classic">
                                          {ayah.numberInSurah}
                                        </span>
                                        {' '}
                                      </React.Fragment>
                                    ))}
                                  </div>
                                </div>
                              </div>
                            ) : (
                              <div className="mushaf-page-classic">
                                <div className="mushaf-inner-border"></div>
                                <div className="text-center flex items-center justify-center" style={{ position: 'relative', zIndex: 1, minHeight: '600px' }}>
                                  <div>
                                    <div className="text-6xl mb-6 opacity-30">📖</div>
                                    <p className="text-2xl mushaf-text-classic">اختر سورة من القائمة</p>
                                  </div>
                                </div>
                              </div>
                            )}
                            
                            {/* أزرار التنقل بين الصفحات */}
                            {selectedSurah && (
                              <div className="space-y-6 mt-8">
                                {/* شريط التقدم */}
                                <div className="max-w-2xl mx-auto px-4">
                                  <div className="text-center mb-2">
                                    <span className="text-lg font-bold text-blue-900 dark:text-blue-300">
                                      📊 التقدم في المصحف: {Math.round((currentPage / 604) * 100)}%
                                    </span>
                                  </div>
                                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-4 shadow-inner">
                                    <div
                                      className="bg-gradient-to-r from-blue-500 via-emerald-500 to-teal-500 h-full rounded-full transition-all duration-500 flex items-center justify-end pr-2"
                                      style={{ width: `${(currentPage / 604) * 100}%` }}
                                    >
                                      <span className="text-white text-xs font-bold drop-shadow-lg">
                                        {currentPage}/604
                                      </span>
                                    </div>
                                  </div>
                                </div>
                                
                                <div className="flex items-center justify-center gap-4">
                                <button
                                  onClick={handlePrevPage}
                                  disabled={currentPage <= 1}
                                  className="px-8 py-4 bg-gradient-to-r from-blue-900 to-blue-800 hover:from-blue-800 hover:to-blue-700 text-white font-black text-xl rounded-2xl disabled:opacity-30 disabled:cursor-not-allowed shadow-2xl transition-all duration-300 transform hover:scale-105 disabled:transform-none border-2 border-blue-700"
                                  style={{ minWidth: '200px' }}
                                >
                                  ➡️ الصفحة السابقة
                                </button>
                                
                                <div className="flex flex-col items-center gap-2">
                                  <span className="text-xl font-bold text-blue-900 dark:text-blue-300">الصفحة</span>
                                  <input
                                    type="number"
                                    inputMode="numeric"
                                    min="1"
                                    max="604"
                                    value={currentPage}
                                    onChange={(e) => {
                                      const page = parseInt(e.target.value);
                                      if (page >= 1 && page <= 604) {
                                        setCurrentPage(page);
                                      }
                                    }}
                                    className="w-28 px-4 py-3 text-center bg-white dark:bg-slate-800 border-4 border-blue-900 dark:border-blue-600 text-blue-900 dark:text-blue-200 rounded-xl font-black text-2xl shadow-lg"
                                    dir="ltr"
                                    lang="en"
                                    style={{ fontFamily: 'Roboto Mono, monospace' }}
                                  />
                                  <span className="text-sm font-semibold text-blue-700 dark:text-blue-400">من 604</span>
                                </div>
                                
                                <button
                                  onClick={handleNextPage}
                                  disabled={currentPage >= 604}
                                  className="px-8 py-4 bg-gradient-to-r from-blue-900 to-blue-800 hover:from-blue-800 hover:to-blue-700 text-white font-black text-xl rounded-2xl disabled:opacity-30 disabled:cursor-not-allowed shadow-2xl transition-all duration-300 transform hover:scale-105 disabled:transform-none border-2 border-blue-700"
                                  style={{ minWidth: '200px' }}
                                >
                                  ⬅️ الصفحة التالية
                                </button>
                              </div>
                              </div>
                            )}
                          </div>
                          
                          
                        </div>
                      ) : (
                        <div className="text-center py-20">
                          <div className="text-6xl mb-4">📖</div>
                          <p className="text-gray-600 dark:text-slate-400 text-lg font-bold">اختر سورة من القائمة للبدء</p>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Play Button */}
                  <button
                    onClick={() => setIsPlayingQuran(!isPlayingQuran)}
                    disabled={!selectedSurah}
                    className="w-full px-8 py-4 bg-gradient-to-r from-emerald-500 via-teal-500 to-cyan-500 hover:from-emerald-600 hover:via-teal-600 hover:to-cyan-600 text-white rounded-xl font-black text-lg disabled:opacity-40 disabled:cursor-not-allowed disabled:bg-gray-500 dark:disabled:bg-gray-700 disabled:from-gray-500 disabled:to-gray-600 dark:disabled:from-gray-700 dark:disabled:to-gray-800 shadow-xl shadow-emerald-500/30 transition-all duration-300 transform hover:scale-105 disabled:transform-none disabled:shadow-none"
                  >
                    <span className="flex items-center justify-center gap-2">
                      {isPlayingQuran ? '⏸️ إيقاف التلاوة' : '▶️ تشغيل السورة'}
                      {isPlayingQuran && (
                        <span className="inline-block w-2 h-2 bg-white rounded-full animate-pulse"></span>
                      )}
                    </span>
                  </button>
                </div>
              </div>

              {/* Sidebar */}
              <div className="space-y-6">
                {/* Current Task */}
                <div 
                  className="sidebar-card backdrop-blur-sm rounded-2xl p-6 shadow-2xl border-2"
                  style={{
                    background: 'linear-gradient(to bottom right, rgb(30, 41, 59), rgb(15, 23, 42))',
                    borderColor: 'rgb(51, 65, 85)'
                  }}
                >
                  <h3 className="text-xl font-black text-emerald-400 mb-4 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="12" cy="12" r="10"/>
                      <circle cx="12" cy="12" r="6"/>
                      <circle cx="12" cy="12" r="2"/>
                    </svg>
                    المهمة الحالية
                  </h3>
                  
                  {currentTaskId ? (
                    tasks.filter(task => task.id === currentTaskId).map(task => (
                      <div key={task.id} className="p-4 bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-900/30 dark:to-teal-900/30 border-2 border-emerald-300 dark:border-emerald-700 rounded-xl shadow-lg">
                        <div className="font-bold text-emerald-900 dark:text-emerald-100 mb-2">
                          📌 {task.text}
                        </div>
                        <div dir="ltr" lang="en" className="english-numbers text-sm font-semibold text-emerald-700 dark:text-emerald-300" style={{ fontVariantNumeric: 'lining-nums' }}>
                          🍅 {task.completedPomodoros} / {task.estimatedPomodoros} بومودورو
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center text-gray-500 dark:text-gray-400 py-8 bg-gray-50 dark:bg-gray-900/30 rounded-xl">
                      <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" className="mx-auto mb-2 opacity-50">
                        <circle cx="12" cy="12" r="10"/>
                        <circle cx="12" cy="12" r="6"/>
                        <circle cx="12" cy="12" r="2"/>
                      </svg>
                      <p className="text-sm font-medium">لا توجد مهمة محددة</p>
                    </div>
                  )}
                </div>

                {/* Background Sounds */}
                <div 
                  className="sidebar-card backdrop-blur-sm rounded-2xl p-6 shadow-2xl border-2"
                  style={{
                    background: 'linear-gradient(to bottom right, rgb(30, 41, 59), rgb(15, 23, 42))',
                    borderColor: 'rgb(51, 65, 85)'
                  }}
                >
                  <h3 className="text-xl font-black text-emerald-400 mb-4 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/>
                      <path d="M16 9a5 5 0 0 1 0 6"/>
                      <path d="M19.364 18.364a9 9 0 0 0 0-12.728"/>
                    </svg>
                    الأصوات المصاحبة
                  </h3>
                  
                  <div className="space-y-2">
                    {backgroundSounds.map((sound) => (
                      <button
                        key={sound.id}
                        onClick={() => setSelectedSound(sound.id)}
                        className={`w-full p-3 rounded-xl flex items-center gap-3 transition-all duration-300 transform hover:scale-105 font-semibold ${
                          selectedSound === sound.id
                            ? 'bg-gradient-to-r from-emerald-100 to-teal-100 dark:from-emerald-900/40 dark:to-teal-900/40 border-2 border-emerald-400 dark:border-emerald-600 shadow-lg text-emerald-900 dark:text-emerald-100'
                            : 'bg-gray-50 dark:bg-gray-700/30 border-2 border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'
                        }`}
                      >
                        <span className="text-2xl">{sound.icon}</span>
                        <span className="text-sm flex-1 text-right">
                          {sound.name}
                        </span>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Tasks Tab */}
          {activeTab === 'tasks' && (
            <div className="space-y-4">
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  قائمة المهام
                </h2>
                <p className="text-gray-600 dark:text-gray-400">
                  نظّم مهامك وتتبع إنجازك
                </p>
              </div>
              
              {tasks.length === 0 ? (
                <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-2xl border-2 border-dashed border-gray-300 dark:border-gray-700">
                  <div className="text-6xl mb-4">📝</div>
                  <p className="text-gray-600 dark:text-gray-400 mb-6 font-semibold text-lg">
                    لا توجد مهام بعد
                  </p>
                  <button
                    onClick={() => setActiveTab('timer')}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-600 dark:to-teal-700 hover:from-emerald-600 hover:to-teal-700 dark:hover:from-emerald-700 dark:hover:to-teal-800 text-white font-bold rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105"
                  >
                    ➕ أضف مهمة جديدة
                  </button>
                </div>
              ) : (
                <div className="space-y-3">
                  {tasks.map((task) => (
                    <div
                      key={task.id}
                      className={`p-5 rounded-2xl border-2 transition-all duration-300 ${
                        task.completed
                          ? 'bg-gray-100 dark:bg-gray-800/70 border-gray-300 dark:border-gray-600'
                          : currentTaskId === task.id
                          ? 'bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-900/30 dark:to-teal-900/30 border-emerald-400 dark:border-emerald-600 shadow-lg'
                          : 'bg-white dark:bg-gray-800/90 border-gray-200 dark:border-gray-700 hover:border-emerald-300 dark:hover:border-emerald-700'
                      }`}
                    >
                      <div className="flex items-start gap-3">
                        <input
                          type="checkbox"
                          checked={task.completed}
                          onChange={() => handleToggleTask(task.id)}
                          className="mt-1 w-5 h-5 rounded border-gray-300 dark:border-gray-600 text-emerald-600 dark:text-emerald-500 focus:ring-emerald-500 dark:focus:ring-emerald-600 bg-white dark:bg-gray-700 cursor-pointer"
                          style={{ colorScheme: 'dark' }}
                        />
                        
                        <div className="flex-1">
                          <div className={`font-bold text-lg ${task.completed ? 'line-through text-gray-400 dark:text-gray-500' : 'text-gray-900 dark:text-white'}`}>
                            {task.text}
                          </div>
                          
                          <div dir="ltr" lang="en" className="english-numbers mt-2 text-sm font-semibold text-gray-600 dark:text-gray-400" style={{ fontVariantNumeric: 'lining-nums' }}>
                            🍅 {task.completedPomodoros} / {task.estimatedPomodoros} بومودورو
                          </div>
                        </div>
                        
                        <button
                          onClick={() => handleDeleteTask(task.id)}
                          className="px-4 py-2 text-sm bg-gradient-to-r from-red-500 to-red-600 dark:from-red-600 dark:to-red-700 hover:from-red-600 hover:to-red-700 dark:hover:from-red-700 dark:hover:to-red-800 text-white font-bold rounded-xl transition-all duration-300 transform hover:scale-105 shadow-md"
                        >
                          🗑️ حذف
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Statistics Tab */}
          {activeTab === 'stats' && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  إحصائيات الإنتاجية
                </h2>
                <p className="text-gray-600 dark:text-gray-400">
                  تتبع تقدمك وإنجازك
                </p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-900/30 dark:to-teal-900/30 rounded-2xl p-8 text-center border-2 border-emerald-200 dark:border-emerald-700/50 shadow-xl">
                  <div dir="ltr" lang="en" className="english-numbers text-6xl font-black bg-gradient-to-r from-emerald-600 to-teal-600 dark:from-emerald-400 dark:to-teal-400 bg-clip-text text-transparent mb-3" style={{ fontVariantNumeric: 'lining-nums' }}>
                    {completedPomodoros}
                  </div>
                  <div className="text-emerald-700 dark:text-emerald-300 font-bold text-lg">
                    🍅 بومودورو مكتمل
                  </div>
                </div>
                
                <div className="bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/30 dark:to-cyan-900/30 rounded-2xl p-8 text-center border-2 border-blue-200 dark:border-blue-700/50 shadow-xl">
                  <div dir="ltr" lang="en" className="english-numbers text-6xl font-black bg-gradient-to-r from-blue-600 to-cyan-600 dark:from-blue-400 dark:to-cyan-400 bg-clip-text text-transparent mb-3" style={{ fontVariantNumeric: 'lining-nums' }}>
                    {totalFocusTime}
                  </div>
                  <div className="text-blue-700 dark:text-blue-300 font-bold text-lg">
                    ⏱️ دقيقة تركيز
                  </div>
                </div>
                
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/30 dark:to-pink-900/30 rounded-2xl p-8 text-center border-2 border-purple-200 dark:border-purple-700/50 shadow-xl">
                  <div dir="ltr" lang="en" className="english-numbers text-6xl font-black bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400 bg-clip-text text-transparent mb-3" style={{ fontVariantNumeric: 'lining-nums' }}>
                    {tasks.filter(t => t.completed).length}
                  </div>
                  <div className="text-purple-700 dark:text-purple-300 font-bold text-lg">
                    ✅ مهمة منجزة
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Settings Tab */}
          {activeTab === 'settings' && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                  إعدادات المؤقت
                </h2>
                <p className="text-gray-600 dark:text-gray-400">
                  خصص أوقات العمل والراحة حسب احتياجك
                </p>
              </div>
              
              <div style={{ background: 'linear-gradient(135deg, #1e293b, #0f172a)', borderRadius: '16px', padding: '32px', boxShadow: '0 25px 50px rgba(0,0,0,0.3)', border: '2px solid #334155' }}>
                
                <div style={{ marginBottom: '24px' }}>
                  <label style={{ display: 'block', fontSize: '18px', fontWeight: 'bold', color: '#34d399', marginBottom: '12px' }}>
                    ⏱️ مدة العمل (دقيقة)
                  </label>
                  <input
                    type="number"
                    inputMode="numeric"
                    pattern="[0-9]*"
                    min="1"
                    max="60"
                    value={workDuration}
                    onChange={(e) => setWorkDuration(Number(e.target.value))}
                    dir="ltr"
                    lang="en"
                    className="english-numbers"
                    style={{ width: '100%', height: '56px', borderRadius: '12px', border: '2px solid #475569', backgroundColor: '#334155', color: '#ffffff', padding: '0 24px', fontWeight: 'bold', textAlign: 'center', fontSize: '20px', outline: 'none', fontVariantNumeric: 'lining-nums' }}
                  />
                </div>
                
                <div style={{ marginBottom: '24px' }}>
                  <label style={{ display: 'block', fontSize: '18px', fontWeight: 'bold', color: '#34d399', marginBottom: '12px' }}>
                    ☕ مدة الراحة القصيرة (دقيقة)
                  </label>
                  <input
                    type="number"
                    inputMode="numeric"
                    pattern="[0-9]*"
                    min="1"
                    max="30"
                    value={shortBreakDuration}
                    onChange={(e) => setShortBreakDuration(Number(e.target.value))}
                    dir="ltr"
                    lang="en"
                    className="english-numbers"
                    style={{ width: '100%', height: '56px', borderRadius: '12px', border: '2px solid #475569', backgroundColor: '#334155', color: '#ffffff', padding: '0 24px', fontWeight: 'bold', textAlign: 'center', fontSize: '20px', outline: 'none', fontVariantNumeric: 'lining-nums' }}
                  />
                </div>
                
                <div style={{ marginBottom: '24px' }}>
                  <label style={{ display: 'block', fontSize: '18px', fontWeight: 'bold', color: '#34d399', marginBottom: '12px' }}>
                    🌙 مدة الراحة الطويلة (دقيقة)
                  </label>
                  <input
                    type="number"
                    inputMode="numeric"
                    pattern="[0-9]*"
                    min="1"
                    max="60"
                    value={longBreakDuration}
                    onChange={(e) => setLongBreakDuration(Number(e.target.value))}
                    dir="ltr"
                    lang="en"
                    className="english-numbers"
                    style={{ width: '100%', height: '56px', borderRadius: '12px', border: '2px solid #475569', backgroundColor: '#334155', color: '#ffffff', padding: '0 24px', fontWeight: 'bold', textAlign: 'center', fontSize: '20px', outline: 'none', fontVariantNumeric: 'lining-nums' }}
                  />
                </div>
                
                <button
                  onClick={() => {
                    setMinutes(workDuration);
                    setSeconds(0);
                    alert('تم حفظ الإعدادات بنجاح! ✅');
                  }}
                  style={{ width: '100%', padding: '20px', background: 'linear-gradient(to right, #10b981, #14b8a6)', color: '#ffffff', fontWeight: 'bold', fontSize: '20px', borderRadius: '12px', border: 'none', cursor: 'pointer', boxShadow: '0 10px 25px rgba(16, 185, 129, 0.3)' }}
                >
                  💾 حفظ الإعدادات
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

