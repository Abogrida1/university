#!/usr/bin/env node

/**
 * ูุญุต ูุง ูุจู ุงููุดุฑ - Pre-deployment Check
 * ูุชุญูู ูู ุฃู ุงููุดุฑูุน ุฌุงูุฒ ูููุดุฑ ุนูู Vercel
 */

const fs = require('fs');
const path = require('path');

console.log('๐ ูุญุต ุงููุดุฑูุน ูุจู ุงููุดุฑ...\n');

const checks = [
  {
    name: 'package.json',
    check: () => fs.existsSync('package.json'),
    message: 'โ package.json ููุฌูุฏ'
  },
  {
    name: 'next.config.js',
    check: () => fs.existsSync('next.config.js'),
    message: 'โ next.config.js ููุฌูุฏ'
  },
  {
    name: 'vercel.json',
    check: () => fs.existsSync('vercel.json'),
    message: 'โ vercel.json ููุฌูุฏ'
  },
  {
    name: 'src directory',
    check: () => fs.existsSync('src'),
    message: 'โ ูุฌูุฏ src ููุฌูุฏ'
  },
  {
    name: 'Supabase config',
    check: () => fs.existsSync('src/lib/supabase.ts'),
    message: 'โ ุฅุนุฏุงุฏ Supabase ููุฌูุฏ'
  },
  {
    name: 'No .env files',
    check: () => {
      const envFiles = ['.env', '.env.local', '.env.production', '.env.development'];
      return !envFiles.some(file => fs.existsSync(file));
    },
    message: 'โ ูููุงุช .env ุบูุฑ ููุฌูุฏุฉ (ุขูู ูููุดุฑ)'
  },
  {
    name: 'Git ignore',
    check: () => fs.existsSync('.gitignore'),
    message: 'โ .gitignore ููุฌูุฏ'
  },
  {
    name: 'Main page exists',
    check: () => fs.existsSync('src/app/page.tsx'),
    message: 'โ ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ ููุฌูุฏุฉ'
  },
  {
    name: 'Materials page exists',
    check: () => fs.existsSync('src/app/materials/[id]/page.tsx'),
    message: 'โ ุตูุญุฉ ุงูููุงุฏ ููุฌูุฏุฉ'
  },
  {
    name: 'Supabase service exists',
    check: () => fs.existsSync('src/lib/supabaseServiceFixed.ts'),
    message: 'โ ุฎุฏูุฉ Supabase ููุฌูุฏุฉ'
  },
  {
    name: 'No temporary files',
    check: () => {
      const tempFiles = ['p.id', 't.value', 'y.value', 'setStep(2)}', 'handleProgramSelect(program.id)}'];
      return !tempFiles.some(file => fs.existsSync(file));
    },
    message: 'โ ูุง ุชูุฌุฏ ูููุงุช ูุคูุชุฉ'
  }
];

let allPassed = true;

checks.forEach(check => {
  if (check.check()) {
    console.log(check.message);
  } else {
    console.log(`โ ${check.name} ููููุฏ ุฃู ุบูุฑ ุตุญูุญ`);
    allPassed = false;
  }
});

console.log('\n' + '='.repeat(50));

if (allPassed) {
  console.log('๐ ุงููุดุฑูุน ุฌุงูุฒ ูููุดุฑ ุนูู Vercel!');
  console.log('\n๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:');
  console.log('1. git add .');
  console.log('2. git commit -m "Ready for Vercel deployment"');
  console.log('3. git push origin main');
  console.log('4. ุงุฐูุจ ูู vercel.com ูุงุฑุจุท ุงููุดุฑูุน');
  console.log('5. ุฃุถู Environment Variables');
  console.log('6. ุงุถุบุท Deploy');
} else {
  console.log('โ ุงููุดุฑูุน ุบูุฑ ุฌุงูุฒ ูููุดุฑ. ูุฑุฌู ุฅุตูุงุญ ุงููุดุงูู ุฃุนูุงู.');
  process.exit(1);
}

console.log('\n๐ ูููุฒูุฏ ูู ุงูุชูุงุตููุ ุฑุงุฌุน: VERCEL_DEPLOYMENT_GUIDE.md');
